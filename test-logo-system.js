#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üß™ Test complet du syst√®me de logo\n');

// 1. V√©rifier que le fichier logo existe
const logoPath = '/Users/aidoudimalek/Windsurf/creche-site/backend/public/images/logo.jpg';
console.log('1. üìÅ V√©rification du fichier logo...');
if (fs.existsSync(logoPath)) {
  const stats = fs.statSync(logoPath);
  console.log(`   ‚úÖ Fichier trouv√©: ${logoPath}`);
  console.log(`   üìä Taille: ${Math.round(stats.size / 1024)} KB`);
  console.log(`   üïí Modifi√©: ${stats.mtime.toLocaleString()}`);
} else {
  console.log(`   ‚ùå Fichier non trouv√©: ${logoPath}`);
}

// 2. Test de l'API publique
console.log('\n2. üåê Test de l\'API publique...');
const { exec } = require('child_process');

exec('curl -s http://localhost:3003/api/settings/public', (error, stdout, stderr) => {
  if (error) {
    console.log(`   ‚ùå Erreur API: ${error.message}`);
    return;
  }
  
  try {
    const data = JSON.parse(stdout);
    if (data.success && data.data.nursery_logo) {
      console.log(`   ‚úÖ Logo dans l'API: ${data.data.nursery_logo}`);
      
      // V√©rifier si le logo a un timestamp
      if (data.data.nursery_logo.includes('?v=')) {
        console.log(`   ‚úÖ Timestamp pr√©sent pour √©viter le cache`);
      } else {
        console.log(`   ‚ö†Ô∏è Pas de timestamp - risque de cache`);
      }
    } else {
      console.log(`   ‚ùå Logo non trouv√© dans l'API`);
    }
  } catch (parseError) {
    console.log(`   ‚ùå Erreur parsing JSON: ${parseError.message}`);
  }
});

// 3. Test d'accessibilit√© du logo
console.log('\n3. üîó Test d\'accessibilit√© du logo...');
exec('curl -I http://localhost:3003/images/logo.jpg', (error, stdout, stderr) => {
  if (error) {
    console.log(`   ‚ùå Logo non accessible: ${error.message}`);
    return;
  }
  
  if (stdout.includes('200 OK')) {
    console.log(`   ‚úÖ Logo accessible via HTTP`);
    
    // Extraire le Content-Type
    const contentTypeMatch = stdout.match(/Content-Type: (.+)/);
    if (contentTypeMatch) {
      console.log(`   üì∑ Type: ${contentTypeMatch[1].trim()}`);
    }
    
    // Extraire la taille
    const contentLengthMatch = stdout.match(/Content-Length: (\d+)/);
    if (contentLengthMatch) {
      const sizeKB = Math.round(parseInt(contentLengthMatch[1]) / 1024);
      console.log(`   üìä Taille HTTP: ${sizeKB} KB`);
    }
  } else {
    console.log(`   ‚ùå Logo non accessible (pas de 200 OK)`);
  }
});

// 4. Instructions pour les tests manuels
setTimeout(() => {
  console.log('\n4. üéØ Tests manuels √† effectuer:');
  console.log('   ‚Ä¢ Allez sur http://localhost:5173');
  console.log('   ‚Ä¢ V√©rifiez que le logo appara√Æt dans le header');
  console.log('   ‚Ä¢ Allez sur /admin/settings');
  console.log('   ‚Ä¢ Changez le logo et v√©rifiez la mise √† jour');
  console.log('   ‚Ä¢ Utilisez l\'ic√¥ne ‚öôÔ∏è dans le footer pour acc√©der aux settings');
  
  console.log('\n‚úÖ Tests automatiques termin√©s!');
}, 2000);
