name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        cd ../backend && npm ci

    - name: 🧪 Run backend tests
      run: cd backend && npm test
      continue-on-error: true

    - name: 🧪 Run frontend tests
      run: cd frontend && npm test
      continue-on-error: true

    - name: 🔍 Lint backend
      run: cd backend && npm run lint || true

    - name: 🔍 Lint frontend
      run: cd frontend && npm run lint || true

  deploy-backend:
    name: 🚀 Deploy Backend to Heroku
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh

    - name: 🔐 Heroku Login
      run: |
        echo "${{ secrets.HEROKU_API_KEY }}" | heroku auth:token

    - name: 📁 Prepare backend for deployment
      run: |
        mkdir -p deploy-backend
        cp -r backend/* deploy-backend/
        cd deploy-backend
        
        # Créer un package.json racine pour Heroku
        cat > package.json << EOF
        {
          "name": "creche-backend-api",
          "version": "2.0.0",
          "description": "Backend API pour le système de gestion de crèche",
          "main": "server.js",
          "scripts": {
            "start": "node server.js",
            "postinstall": "echo 'Backend deployed successfully'"
          },
          "engines": {
            "node": "18.x",
            "npm": "8.x"
          }
        }
        EOF

    - name: 🚀 Deploy to Heroku
      run: |
        cd deploy-backend
        git init
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git add .
        git commit -m "Deploy backend to Heroku"
        
        heroku git:remote -a creche-backend-api
        git push heroku main --force

    - name: 🔧 Configure Heroku environment
      run: |
        heroku config:set NODE_ENV=production -a creche-backend-api
        heroku config:set JWT_SECRET="${{ secrets.JWT_SECRET }}" -a creche-backend-api
        heroku config:set UPLOAD_PATH="/tmp/uploads" -a creche-backend-api

  deploy-frontend:
    name: 🚀 Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [test, deploy-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Install Vercel CLI
      run: npm install -g vercel@latest

    - name: 📁 Prepare frontend for deployment
      run: |
        cd frontend
        npm ci

    - name: 🔧 Configure environment variables
      run: |
        cd frontend
        echo "VITE_API_URL=https://creche-backend-api.herokuapp.com" > .env.production
        echo "VITE_APP_NAME=Mima Elghalia" >> .env.production
        echo "VITE_APP_VERSION=2.0.0" >> .env.production

    - name: 🏗️ Build frontend
      run: |
        cd frontend
        npm run build

    - name: 🚀 Deploy to Vercel
      run: |
        cd frontend
        vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔍 Check Backend Health
      run: |
        sleep 30  # Attendre que le déploiement soit actif
        curl -f https://creche-backend-api.herokuapp.com/api/health || exit 1

    - name: 🔍 Check Frontend Health
      run: |
        curl -f https://creche-frontend.vercel.app || exit 1

    - name: ✅ Deployment Success Notification
      run: |
        echo "🎉 Déploiement réussi!"
        echo "Frontend: https://creche-frontend.vercel.app"
        echo "Backend: https://creche-backend-api.herokuapp.com"
