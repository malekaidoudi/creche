#!/usr/bin/env node

console.log('üêõ D√âMARRAGE DEBUG SERVEUR');
console.log('========================');

// 1. Test des imports
console.log('1Ô∏è‚É£ Test des imports...');
try {
  const express = require('express');
  console.log('‚úÖ Express import√©');
  
  const cors = require('cors');
  console.log('‚úÖ CORS import√©');
  
  require('dotenv').config();
  console.log('‚úÖ dotenv configur√©');
  
} catch (error) {
  console.error('‚ùå Erreur import:', error.message);
  process.exit(1);
}

// 2. Test de la base de donn√©es
console.log('\n2Ô∏è‚É£ Test base de donn√©es...');
try {
  const db = require('./config/db_postgres');
  console.log('‚úÖ Config DB import√©e');
  
  // Test connexion async
  (async () => {
    try {
      await db.testConnection();
      console.log('‚úÖ Connexion DB test√©e');
      
      // 3. Test des routes
      console.log('\n3Ô∏è‚É£ Test des imports de routes...');
      
      const routes = [
        './routes/auth',
        './routes/users', 
        './routes/children',
        './routes/enrollments',
        './routes/attendance',
        './routes/uploads',
        './routes/documents',
        './routes/reports',
        './routes/settings',
        './routes/logs',
        './routes/articles',
        './routes/news',
        './routes/contacts',
        './routes/health',
        './routes/publicEnrollments',
        './routes/setup',
        './routes/profile',
        './routes/absenceRequests',
        './routes/notifications',
        './routes/nurserySettings',
        './routes/holidays',
        './routes/schedule-settings',
        './routes/fixUserRole',
        './routes/userChildren'
      ];
      
      for (const route of routes) {
        try {
          require(route);
          console.log(`‚úÖ Route ${route} import√©e`);
        } catch (error) {
          console.error(`‚ùå Erreur route ${route}:`, error.message);
        }
      }
      
      // 4. Test cr√©ation serveur Express
      console.log('\n4Ô∏è‚É£ Test cr√©ation serveur Express...');
      
      const express = require('express');
      const app = express();
      console.log('‚úÖ App Express cr√©√©e');
      
      // 5. Test middlewares
      console.log('\n5Ô∏è‚É£ Test middlewares...');
      
      app.use(express.json());
      console.log('‚úÖ JSON middleware ajout√©');
      
      const cors = require('cors');
      app.use(cors());
      console.log('‚úÖ CORS middleware ajout√©');
      
      // 6. Test route simple
      console.log('\n6Ô∏è‚É£ Test route simple...');
      
      app.get('/debug', (req, res) => {
        res.json({ status: 'ok', message: 'Debug route fonctionne' });
      });
      console.log('‚úÖ Route debug ajout√©e');
      
      // 7. Test d√©marrage serveur
      console.log('\n7Ô∏è‚É£ Test d√©marrage serveur...');
      
      const PORT = 3001; // Port diff√©rent pour √©viter les conflits
      
      const server = app.listen(PORT, () => {
        console.log(`‚úÖ Serveur debug d√©marr√© sur port ${PORT}`);
        console.log(`üß™ Test: http://localhost:${PORT}/debug`);
        
        // Test auto de la route
        setTimeout(async () => {
          try {
            const response = await fetch(`http://localhost:${PORT}/debug`);
            const data = await response.json();
            console.log('‚úÖ Route debug test√©e:', data);
            
            console.log('\nüéâ TOUS LES TESTS R√âUSSIS !');
            console.log('Le probl√®me ne vient pas des imports ou de la DB');
            
            server.close();
            process.exit(0);
            
          } catch (error) {
            console.error('‚ùå Erreur test route:', error.message);
            server.close();
            process.exit(1);
          }
        }, 1000);
      });
      
      server.on('error', (error) => {
        console.error('‚ùå Erreur serveur:', error.message);
        process.exit(1);
      });
      
    } catch (error) {
      console.error('‚ùå Erreur test DB:', error.message);
      process.exit(1);
    }
  })();
  
} catch (error) {
  console.error('‚ùå Erreur config DB:', error.message);
  process.exit(1);
}
