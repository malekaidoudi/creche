const express = require('express');
const router = express.Router();
const db = require('../config/database');
const { authenticateToken, requireRole } = require('../middleware/auth');

// GET /api/holidays - R√©cup√©rer tous les jours f√©ri√©s
router.get('/', authenticateToken, async (req, res) => {
  try {
    console.log('üìÖ R√©cup√©ration des jours f√©ri√©s');
    
    const [holidays] = await db.execute(`
      SELECT id, name, date, is_closed, description, created_at, updated_at
      FROM holidays 
      ORDER BY date ASC
    `);

    res.json({
      success: true,
      holidays: holidays
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration jours f√©ri√©s:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      details: error.message
    });
  }
});

// GET /api/holidays/year/:year - R√©cup√©rer les jours f√©ri√©s d'une ann√©e
router.get('/year/:year', authenticateToken, async (req, res) => {
  try {
    const { year } = req.params;
    console.log(`üìÖ R√©cup√©ration des jours f√©ri√©s pour l'ann√©e ${year}`);
    
    const [holidays] = await db.execute(`
      SELECT id, name, date, is_closed, description
      FROM holidays 
      WHERE YEAR(date) = ?
      ORDER BY date ASC
    `, [year]);

    res.json({
      success: true,
      holidays: holidays
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration jours f√©ri√©s ann√©e:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      details: error.message
    });
  }
});

// POST /api/holidays - Cr√©er un nouveau jour f√©ri√© (admin seulement)
router.post('/', authenticateToken, requireRole('admin'), async (req, res) => {
  try {
    const { name, date, is_closed = true, description } = req.body;
    
    console.log('‚ûï Cr√©ation nouveau jour f√©ri√©:', { name, date, is_closed });

    // Validation
    if (!name || !date) {
      return res.status(400).json({
        success: false,
        error: 'Le nom et la date sont requis'
      });
    }

    // V√©rifier si la date existe d√©j√†
    const [existing] = await db.execute(
      'SELECT id FROM holidays WHERE date = ?',
      [date]
    );

    if (existing.length > 0) {
      return res.status(400).json({
        success: false,
        error: 'Un jour f√©ri√© existe d√©j√† pour cette date'
      });
    }

    // Ins√©rer le nouveau jour f√©ri√©
    const [result] = await db.execute(`
      INSERT INTO holidays (name, date, is_closed, description)
      VALUES (?, ?, ?, ?)
    `, [name, date, is_closed, description]);

    // R√©cup√©rer le jour f√©ri√© cr√©√©
    const [newHoliday] = await db.execute(
      'SELECT * FROM holidays WHERE id = ?',
      [result.insertId]
    );

    console.log('‚úÖ Jour f√©ri√© cr√©√© avec succ√®s');

    res.status(201).json({
      success: true,
      message: 'Jour f√©ri√© cr√©√© avec succ√®s',
      holiday: newHoliday[0]
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation jour f√©ri√©:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      details: error.message
    });
  }
});

// PUT /api/holidays/:id - Modifier un jour f√©ri√© (admin seulement)
router.put('/:id', authenticateToken, requireRole('admin'), async (req, res) => {
  try {
    const { id } = req.params;
    const { name, date, is_closed, description } = req.body;
    
    console.log(`üìù Modification jour f√©ri√© ${id}:`, { name, date, is_closed });

    // V√©rifier si le jour f√©ri√© existe
    const [existing] = await db.execute('SELECT id FROM holidays WHERE id = ?', [id]);
    if (existing.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Jour f√©ri√© non trouv√©'
      });
    }

    // V√©rifier si la nouvelle date n'existe pas d√©j√† (sauf pour ce jour f√©ri√©)
    if (date) {
      const [dateExists] = await db.execute(
        'SELECT id FROM holidays WHERE date = ? AND id != ?',
        [date, id]
      );

      if (dateExists.length > 0) {
        return res.status(400).json({
          success: false,
          error: 'Un autre jour f√©ri√© existe d√©j√† pour cette date'
        });
      }
    }

    // Construire la requ√™te de mise √† jour
    const updates = [];
    const values = [];

    if (name !== undefined) {
      updates.push('name = ?');
      values.push(name);
    }
    if (date !== undefined) {
      updates.push('date = ?');
      values.push(date);
    }
    if (is_closed !== undefined) {
      updates.push('is_closed = ?');
      values.push(is_closed);
    }
    if (description !== undefined) {
      updates.push('description = ?');
      values.push(description);
    }

    if (updates.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Aucune donn√©e √† mettre √† jour'
      });
    }

    updates.push('updated_at = NOW()');
    values.push(id);

    await db.execute(`
      UPDATE holidays 
      SET ${updates.join(', ')} 
      WHERE id = ?
    `, values);

    // R√©cup√©rer le jour f√©ri√© mis √† jour
    const [updatedHoliday] = await db.execute(
      'SELECT * FROM holidays WHERE id = ?',
      [id]
    );

    console.log('‚úÖ Jour f√©ri√© mis √† jour avec succ√®s');

    res.json({
      success: true,
      message: 'Jour f√©ri√© mis √† jour avec succ√®s',
      holiday: updatedHoliday[0]
    });

  } catch (error) {
    console.error('‚ùå Erreur modification jour f√©ri√©:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      details: error.message
    });
  }
});

// DELETE /api/holidays/:id - Supprimer un jour f√©ri√© (admin seulement)
router.delete('/:id', authenticateToken, requireRole('admin'), async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log(`üóëÔ∏è Suppression jour f√©ri√© ${id}`);

    // V√©rifier si le jour f√©ri√© existe
    const [existing] = await db.execute('SELECT id, name FROM holidays WHERE id = ?', [id]);
    if (existing.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Jour f√©ri√© non trouv√©'
      });
    }

    // Supprimer le jour f√©ri√©
    await db.execute('DELETE FROM holidays WHERE id = ?', [id]);

    console.log(`‚úÖ Jour f√©ri√© "${existing[0].name}" supprim√© avec succ√®s`);

    res.json({
      success: true,
      message: 'Jour f√©ri√© supprim√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur suppression jour f√©ri√©:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      details: error.message
    });
  }
});

// GET /api/holidays/check/:date - V√©rifier si une date est un jour f√©ri√©
router.get('/check/:date', authenticateToken, async (req, res) => {
  try {
    const { date } = req.params;
    
    const [holiday] = await db.execute(`
      SELECT id, name, is_closed, description
      FROM holidays 
      WHERE date = ?
    `, [date]);

    res.json({
      success: true,
      is_holiday: holiday.length > 0,
      is_closed: holiday.length > 0 ? holiday[0].is_closed : false,
      holiday: holiday.length > 0 ? holiday[0] : null
    });

  } catch (error) {
    console.error('‚ùå Erreur v√©rification jour f√©ri√©:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      details: error.message
    });
  }
});

module.exports = router;
